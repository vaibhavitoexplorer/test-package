/**
 * SKUs API
 * A stock keeping unit (SKU) represents a specific product variation.   <a name=\"sku-object\"></a>     # The SKU object  The SKU object provides product information.  <table> <tr>     <td><b>Attributes</b></td>     <td><b>Description</b></td> </tr> <tr>     <td><b>createdTime</b>     <br>     datetime</td>     <td>The time when the SKU was created.</td> </tr>     <tr>     <td><b>id</b>     <br>     string</td>     <td>Unique identifier of a SKU.</td> </tr> <tr>     <td><b>eccn</b>     <br>     string</td>     <td>The Export Control Classification Number.</td> </tr>      <tr>     <td><b>taxCode</b>     <br>     string</td>     <td>The tax code.</td> </tr>    <tr>     <td><b>name</b>     <br>     string</td>     <td>The product\'s name.</td> </tr>    <tr>     <td><b>countryOfOrigin</b>     string<br>     </td>     <td>Two-letter country code.</td> </tr> <tr>     <td><b>weight</b>     <br>     number</td>     <td>The weight of the SKU in the unit system specified with weightUnit</td> </tr>    <tr>     <td><b>weightUnit</b>     <br>     string</td>     <td>The unit of measurement that applies to the SKU weight. If you do not specify a value for weightUnit, then the default unit of measurement is applied.</td> </tr>   <tr>     <td><b>liveMode</b>     <br>     boolean</td>     <td>Has the value is true of the object exists in live mode or the value false if the object exists in test mode.</td> </tr>   </table>  ## SKU object example     {       \"createdTime\": \"2018-04-25T20:36:00Z\",       \"id\": \"sku_5823594809\",       \"eccn\": \"EAR99\",       \"taxCode\": \"4323.310_A\",       \"name\": \"Athena Womens Running Shoes\",       \"countryOfOrigin\": \"US\",       \"weight\": 20.5,       \"weightUnit\": \"oz\",       \"liveMode\": false     }
 *
 * The version of the OpenAPI document: 1.0.14
 * Contact: aknights@digitalriver.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { DigitalTaxRequest } from '../model/digitalTaxRequest';
import { InlineResponse200 } from '../model/inlineResponse200';
import { PhysicalTaxRequest } from '../model/physicalTaxRequest';
import { Sku } from '../model/sku';
import { SkuRequest } from '../model/skuRequest';
import { SkuUpsertRequest } from '../model/skuUpsertRequest';
import { TaxResponse } from '../model/taxResponse';
import { UpdateSkuRequest } from '../model/updateSkuRequest';
import { Authentication, Interceptor } from '../model/models';
import { HttpBearerAuth, ApiKeyAuth } from '../model/models';
export declare enum SKUsApiApiKeys {
    apiKey = "apiKey"
}
export declare class SKUsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        apiKey: ApiKeyAuth;
        bearerAuth: HttpBearerAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SKUsApiApiKeys, value: string): void;
    set accessToken(accessToken: string | (() => string));
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Permanently deletes a SKU. Supply the unique identifier of the SKU.
     * @summary Deletes a SKU by ID.
     * @param id SKU identifier
     */
    _delete(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Calculates tax for a SKU.
     * @summary Calculates tax for a SKU.
     * @param id SKU identifier.
     * @param physicalTaxRequestDigitalTaxRequest
     */
    calculateTax(id: string, physicalTaxRequestDigitalTaxRequest?: PhysicalTaxRequest | DigitalTaxRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TaxResponse;
    }>;
    /**
     * Creates a SKU.
     * @summary Creates a SKU.
     * @param skuRequest
     */
    create(skuRequest?: SkuRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Sku;
    }>;
    /**
     * Get all SKUs.
     * @summary Returns a list of SKUs.
     * @param createdTime A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **gt**–return values where the createdTime field is after this timestamp   - **gte**–return values where the createdTime field is after or equal to this timestamp   - **lt**–return values where the createdTime field is before this timestamp   - **lte**–return values where the createdTime field is before or equal to this timestamp
     * @param updatedTime A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **gt**–return values where the updatedTime field is after this timestamp   - **gte**–return values where the updatedTime field is after or equal to this timestamp   - **lt**–return values where the updatedTime field is before this timestamp   - **lte**–return values where the updatedTime field is before or equal to this timestamp
     * @param endingBefore A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list.
     * @param startingAfter A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list.
     * @param limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.
     * @param ids Only return objects with these IDs.
     * @param eccn The Export Control Classification Number (ECCN) associated with the SKUs you want to retrieve.
     * @param partNumber The partNumber associated with the SKUs you want to retrieve.
     * @param taxCode The taxCode associated with the SKUs you want to retrieve.
     */
    list(createdTime?: Date, updatedTime?: Date, endingBefore?: string, startingAfter?: string, limit?: number, ids?: Array<string>, eccn?: string, partNumber?: string, taxCode?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: InlineResponse200;
    }>;
    /**
     * Retrieves the details of a SKU. You must supply the unique identifier of the SKU.
     * @summary Gets a SKU by ID.
     * @param id SKU identifier.
     */
    retrieve(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Sku;
    }>;
    /**
     * Updates the specified SKU by setting the values of the parameters passed. Any parameters not provided will remain unchanged.
     * @summary Updates a SKU.
     * @param id SKU identifier.
     * @param updateSkuRequest
     */
    update(id: string, updateSkuRequest?: UpdateSkuRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Sku;
    }>;
    /**
     * Upserts a SKU.
     * @summary Upserts a SKU.
     * @param id SKU identifier.
     * @param skuUpsertRequest
     */
    upsert(id: string, skuUpsertRequest?: SkuUpsertRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Sku;
    }>;
}
