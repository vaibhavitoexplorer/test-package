/**
 * SKUs API
 * A stock keeping unit (SKU) represents a specific product variation.   <a name=\"sku-object\"></a>     # The SKU object  The SKU object provides product information.  <table> <tr>     <td><b>Attributes</b></td>     <td><b>Description</b></td> </tr> <tr>     <td><b>createdTime</b>     <br>     datetime</td>     <td>The time when the SKU was created.</td> </tr>     <tr>     <td><b>id</b>     <br>     string</td>     <td>Unique identifier of a SKU.</td> </tr> <tr>     <td><b>eccn</b>     <br>     string</td>     <td>The Export Control Classification Number.</td> </tr>      <tr>     <td><b>hsCode</b>     <br>     string</td>     <td>International & US HS Code & Harmonized Tariff Code.</td> </tr>    <tr>     <td><b>partNumber</b>     <br>     string</td>     <td>Manufacturer part number.</td> </tr>    <tr>     <td><b>taxCode</b>     <br>     string</td>     <td>The tax code.</td> </tr>    <tr>     <td><b>name</b>     <br>     string</td>     <td>The product\'s name.</td> </tr>    <tr>     <td><b>description&#42;</b>     <br>     string</td>     <td>A description of the product.</td> </tr>   <tr>     <td><b>image&#42;</b>     <br>     string</td>     <td>An image of the product.</td> </tr>      <tr>     <td><b>url&#42;</b>     <br>     string</td>     <td>A product URL.</td> </tr>     <tr>     <td><b>countryOfOrigin</b>     <br>     string     </td>     <td>Two-letter country code.</td> </tr> <tr>     <td><b>weight</b>     <br>string     </td>     <td>The weight of the sku in the unit system specified with weightUnit.</td> </tr> <tr>     <td><b>weightUnit</b>     string<br>     </td>     <td>The unit of measurement that applies to the sku weight. If you do not specify a value for weightUnit, then the default unit of measurement is applied.</td> </tr> <tr>     <td><b>liveMode</b>     <br>     boolean</td>     <td>Has the value is true of the object exists in live mode or the value false if the object exists in test mode.</td> </tr>   </table>  &#42;These attribute values are only needed for Klarna, ApplePay, or GooglePay payment types.  ## SKU object example  <pre>         {       \"id\": \"sku_5823594809\",       \"eccn\": \"EAR99\",       \"hsCode\": \"6404.20\",       \"taxCode\": \"4323.310_A\",       \"name\": \"Athena Womens Running Shoes\",       \"description\": \"Athena Womens Running Shoes\",       \"image\": \"https://imageurl.com\",       \"url\": \"https://producturl.com\",       \"weight\": 20.5,       \"weightUnit\": \"oz\",       \"countryOfOrigin\": \"US\"     }  </pre> 
 *
 * The version of the OpenAPI document: 1.0.13
 * Contact: aknights@digitalriver.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { Errors } from '../model/errors';
import { InlineResponse200 } from '../model/inlineResponse200';
import { Sku } from '../model/sku';
import { SkuRequest } from '../model/skuRequest';
import { SkuUpsertRequest } from '../model/skuUpsertRequest';
import { UpdateSkuRequest } from '../model/updateSkuRequest';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://virtserver.swaggerhub.com/DigitalRiverX';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SKUsApiApiKeys {
}

export class SKUsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SKUsApiApiKeys, value: string) {
        (this.authentications as any)[SKUsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Creates a SKU. 
     * @summary Creates a SKU.
     * @param skuRequest 
     */
    public async createSkus (skuRequest?: SkuRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Sku;  }> {
        const localVarPath = this.basePath + '/skus';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(skuRequest, "SkuRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Sku;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Sku");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Permanently deletes a SKU. Supply the unique identifier of the SKU. 
     * @summary Deletes a SKU by ID.
     * @param id SKU identifier
     */
    public async deleteSkus (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/skus/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSkus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get all SKUs.
     * @summary Returns a list of SKUs.
     * @param createdTime A filter on the list based on the **createdTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **gt**–return values where the createdTime field is after this timestamp   - **gte**–return values where the createdTime field is after or equal to this timestamp   - **lt**–return values where the createdTime field is before this timestamp   - **lte**–return values where the createdTime field is before or equal to this timestamp 
     * @param updatedTime A filter on the list based on the **updatedTime** field. The value can be a string with an ISO-8601 UTC format datetime or it can be a dictionary with the following options:    - **gt**–return values where the updatedTime field is after this timestamp   - **gte**–return values where the updatedTime field is after or equal to this timestamp   - **lt**–return values where the updatedTime field is before this timestamp   - **lte**–return values where the updatedTime field is before or equal to this timestamp 
     * @param endingBefore A cursor for use in pagination. The endingBefore parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with xyz your subsequent calls can include endingBefore&#x3D;xyz in order to fetch the previous page of the list.
     * @param startingAfter A cursor for use in pagination. The startingAfter parameter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with xyz, your subsequent calls can include startingAfter&#x3D;xyz in order to fetch the next page of the list.
     * @param limit A limit on the number of objects returned. Limit can range between 1 and 100, and the default is 10.
     * @param ids Only return objects with these IDs.
     * @param eccn The Export Control Classification Number (ECCN) associated with the SKUs you want to retrieve.
     * @param partNumber The partNumber associated with the SKUs you want to retrieve.
     * @param hsCode The hsCode associated with the SKUs you want to retrieve.
     * @param taxCode The taxCode associated with the SKUs you want to retrieve.
     */
    public async listSkus (createdTime?: Date, updatedTime?: Date, endingBefore?: string, startingAfter?: string, limit?: number, ids?: Array<string>, eccn?: string, partNumber?: string, hsCode?: string, taxCode?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InlineResponse200;  }> {
        const localVarPath = this.basePath + '/skus';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (createdTime !== undefined) {
            localVarQueryParameters['createdTime'] = ObjectSerializer.serialize(createdTime, "Date");
        }

        if (updatedTime !== undefined) {
            localVarQueryParameters['updatedTime'] = ObjectSerializer.serialize(updatedTime, "Date");
        }

        if (endingBefore !== undefined) {
            localVarQueryParameters['endingBefore'] = ObjectSerializer.serialize(endingBefore, "string");
        }

        if (startingAfter !== undefined) {
            localVarQueryParameters['startingAfter'] = ObjectSerializer.serialize(startingAfter, "string");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (ids !== undefined) {
            localVarQueryParameters['ids'] = ObjectSerializer.serialize(ids, "Array<string>");
        }

        if (eccn !== undefined) {
            localVarQueryParameters['eccn'] = ObjectSerializer.serialize(eccn, "string");
        }

        if (partNumber !== undefined) {
            localVarQueryParameters['partNumber'] = ObjectSerializer.serialize(partNumber, "string");
        }

        if (hsCode !== undefined) {
            localVarQueryParameters['hsCode'] = ObjectSerializer.serialize(hsCode, "string");
        }

        if (taxCode !== undefined) {
            localVarQueryParameters['taxCode'] = ObjectSerializer.serialize(taxCode, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InlineResponse200;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InlineResponse200");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Retrieves the details of a SKU. You must supply the unique identifier of the SKU.
     * @summary Gets a SKU by ID.
     * @param id SKU identifier.
     */
    public async retrieveSkus (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Sku;  }> {
        const localVarPath = this.basePath + '/skus/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieveSkus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Sku;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Sku");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates the specified SKU by setting the values of the parameters passed. Any parameters not provided will remain unchanged.
     * @summary Updates a SKU.
     * @param id SKU identifier.
     * @param updateSkuRequest 
     */
    public async updateSkus (id: string, updateSkuRequest?: UpdateSkuRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Sku;  }> {
        const localVarPath = this.basePath + '/skus/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateSkus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateSkuRequest, "UpdateSkuRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Sku;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Sku");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Upserts a SKU. 
     * @summary Upserts a SKU.
     * @param id SKU identifier.
     * @param skuUpsertRequest 
     */
    public async upsertSkus (id: string, skuUpsertRequest?: SkuUpsertRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Sku;  }> {
        const localVarPath = this.basePath + '/skus/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling upsertSkus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(skuUpsertRequest, "SkuUpsertRequest")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Sku;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Sku");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
